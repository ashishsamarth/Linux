To check awk version                                                            :-  awk --version
To print tabbed output of specific columns                                      :-  awk '{print $3 "\t" $4}' filename                                           
To Print number of lines in a file                                              :-  awk 'END { print NR }' filename
{advantage over wc –l is that – this does not print the filename}

To search for a pattern in a column and print entire row for searched pattern   :-  awk '/pattern/ {print $0}' marks.txt
To read the awk command from a file and execute it                              :-  awk -f read.awk marks.txt
To Print Count of lines containing the pattern                                  :-  awk '/pattern/ {++cnt} END {print "COUNT=" cnt}' marks.txt
To assign a variable before its execution and print it                          :-  awk -v name=jerry 'BEGIN {print name}'

To print the number of arguments passed to the command line                     :-  awk 'BEGIN {print "Arguments=" ARGC}' one two three
(special AWK Variable - ARGC)

To print the current user (special variable ENVIRON & USER)                     :-  awk 'BEGIN {print ENVIRON["USER"]}'
To print the value of a previously assigned variable                            :-  echo abc | awk -v val=$value '{print val}'
To print the current filename (special variable FILENAME)                       :-  awk 'END {print FILENAME}' marks.txt
                                                                                :-  awk '{print FILENAME}' marks.txt|uniq
                                                                                    Note:- If END is not used, it will print the filename same # of times, 
                                                                                    equal to the # of rows in it

To emulate custom delimeter like in cut, special variable FS (field separator)  :-  awk 'BEGIN {FS = ")"} ; {print $2}' marks.txt                                                                                                                 
To print number of fields in current record (special variable NF)               :-  awk 'NR==1 {print NF}' filename
To print the line # of the current record (Special Variable NR)                 :-  awk '/pattern/ {print NR}' filename
To print the filename where the pattern appears                                 :-  awk '/pattern/ {print FILENAME}' *
To print the filename and the line # where record appears                       :-  awk '/pattern/ {print FILENAME, FNR;}' *
To use a different record separator for output (Special variable ORS)           :-  echo “This is how it works” | awk ‘BEGIN{RS=” ”}{print $0}’
(tab in this case)

To print values from a file having fixed length or to emulate cut -c            :-  awk 'BEGIN {FS=":";FIELDWIDTHS = "3 5 7 3"} {print $3}' marks2.txt 
(special variable FIELDWIDTH)  

To search and print a pattern with case ignored (emulate grep -i)               :-  awk 'BEGIN {IGNORECASE=1}; /pattern/' marks.txt

---------------------------------------------------------------------------------------------------------------------------------------------------------

Arithmetic Operators    :-  awk 'BEGIN { a = 50; b = 20; print "(a + b) = " (a + b) }'
                            awk 'BEGIN { a = 50; b = 20; print "(a - b) = " (a - b) }'
                            awk 'BEGIN { a = 50; b = 20; print "(a * b) = " (a * b) }'
                            awk 'BEGIN { a = 50; b = 20; print "(a / b) = " (a / b) }'
                            awk 'BEGIN { a = 50; b = 20; print "(a % b) = " (a % b) }'

Pre-Increment Operator  :-  awk 'BEGIN { a=10; b=++a; print "Value of a =" a "\n" "value of b =" b}'
Pre-Decrement Operator  :-  awk 'BEGIN { a=10; b=--a; print "Value of a =" a "\n" "value of b =" b}'
Post-Increment Operator :-  awk 'BEGIN { a=10; b=a++; print "Value of a =" a "\n" "value of b =" b}'
Post-Decrement Operator :-  awk 'BEGIN { a=10; b=a--; print "Value of a =" a "\n" "value of b =" b}'

Assignment Operator     :-  awk 'BEGIN { name = "Jerry"; print "My name is", name }'

Shorthand Operations    :-  awk 'BEGIN { cnt=10; cnt += 10; print "Counter =", cnt }'   :Counter = 20
                            awk 'BEGIN { cnt=100; cnt -= 10; print "Counter =", cnt }'  :Counter = 90
                            awk 'BEGIN { cnt=10; cnt *= 10; print "Counter =", cnt }'   :Counter = 100
                            awk 'BEGIN { cnt=100; cnt /= 5; print "Counter =", cnt }'   :Conuter = 20
                            awk 'BEGIN { cnt=100; cnt %= 8; print "Counter =", cnt }'   :Counter = 4
                            awk 'BEGIN { cnt=2; cnt ^= 4; print "Counter =", cnt }'     :Counter = 16
                            awk 'BEGIN { cnt=2; cnt **= 4; print "Counter =", cnt }'    :Counter = 16

Relational Operations   :-  awk 'BEGIN { a = 10; b = 10; if (a == b) print "a == b" }'
                            awk 'BEGIN { a = 10; b = 20; if (a != b) print "a != b" }'
                            awk 'BEGIN { a = 10; b = 20; if (a < b) print "a < b" }'
                            awk 'BEGIN { a = 10; b = 10; if (a <= b) print "a <= b" }'
                            awk 'BEGIN { a = 10; b = 20; if (b > a ) print "b > a" }'
                            awk 'BEGIN { a = 10; b = 10; if (a >= b) print "a >= b" }'

Logical Operators       :-  awk 'BEGIN {num = 5; if (num >= 0 && num <= 7) printf "%d is in octal format\n", num }' --AND
                            awk 'BEGIN {ch = "\n"; if (ch == " " || ch == "\t" || ch == "\n") print "Current character is whitespace." }' --OR
                            awk 'BEGIN { name = ""; if (! length(name)) print "name is empty string." }'  --NOT
                            awk 'BEGIN { a = 10; b = 20; (a > b) ? max = a : max = b; print "Max =", max}' --Ternary
                            awk 'BEGIN { a = -10; a = +a; print "a =", a }' --Unary + {a=-10}
                            awk 'BEGIN { a = -10; a = -a; print "a =", a }' --Unary - {a =10}
                            awk 'BEGIN { a = 10; a = a ^ 2; print "a =", a }' --Exponential {a=100}
                            awk 'BEGIN { a = 10; a = a ** 2; print "a =", a }' --Exponential {a=100}
  
Concatenation           :-  awk 'BEGIN { str1="Hello, "; str2="World"; str3 = str1 str2; print str3 }'  :-- Hello World

Array Membership        :-  awk 'BEGIN { arr[0] = 1; arr[1] = 2; arr[2] = 3; for (i in arr) printf "arr[%d] = %d\n", i, arr[i] }'

                                arr[2] = 3
                                arr[0] = 1
                                arr[1] = 2

Regular Expressions     :-  awk '$0 ~ 9' marks.txt
                            awk '$0 !~ 9' marks.txt
                            echo -e "cat \nbat \nmat \nrat"|awk '/b.t/'  -- '.'                                     :Will match only one character :- bat
                            echo -e "This\nThat\nThere\nthese" | awk '/^The/' -- '^'                                :Will match start of line : There
                            echo -e "knife\nknow\nfun\nfin\nfan\nnine" | awk '/n$/' -- '$'                          :Will match end of line
                            echo -e "Call\nTall\nBall" | awk '/[CT]all/'                                            :Match Character Set : Call , Tall
                            echo -e "Call\nTall\nBall" | awk '/[^CT]all/'                                           :Exclusive Character Set : Ball
                            echo -e "Call\nTall\nBall\nSmall\nShall" | awk '/Call|Ball/'                            :Piped Match
                            echo -e "Colour\nColor" | awk '/Colou?r/'                                               :Zero or one occurence :- Colour Color
                            echo -e "ca\ncat\ncatt" | awk '/cat*/'                                                  :Zero or More occurence
                            echo -e "111\n22\n123\n234\n456\n222"  | awk '/2+/'                                     :One or more occurence:- 22 123 234 222
                            echo -e "Apple Juice\nApple Pie\nApple Tart\nApple Cake" | awk '/Apple (Juice|Cake)/'   :Grouping :-Apple Juice , Apple Cake

Conditional Statements  :-  
    IF                  :-   awk 'BEGIN {num = 10; if (num % 2 == 0) printf "%d is even number.\n", num }'
    IF - ELSE           :-   awk 'BEGIN {num = 11; if (num % 2 == 0) printf "%d is even number.\n", num; else printf "%d is odd number.\n", num }'
    IF-ELSE-IF          :-   awk 'BEGIN {a=30;if (a==10)  print "a = 10"; else if (a == 20)  print "a = 20";else if (a == 30)  print "a = 30";}'
    FOR Loop            :-   awk 'BEGIN { for (i = 1; i <= 5; ++i) print i }'
    WHILE Loop          :-   awk 'BEGIN {i = 1; while (i < 6) { print i; ++i } }'
    Do-WHILE Loop       :-   awk 'BEGIN {i = 1; do { print i; ++i } while (i < 6) }'
    BREAK               :-   awk 'BEGIN {sum = 0; for (i = 0; i < 20; ++i) { sum += i; if (sum > 50) break; else print "Sum =", sum } }'
    CONTINUE            :-   awk 'BEGIN {for (i = 1; i <= 20; ++i) {if (i % 2 == 0) print i ; else continue} }'
    EXIT                :-   awk 'BEGIN {sum = 0; for (i = 0; i < 20; ++i) { sum += i; if (sum > 50) exit(10); else print "Sum =", sum } }'





